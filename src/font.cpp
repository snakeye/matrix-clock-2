#include <Arduino.h>

#include "font.h"

// bit patterns for the font
const PROGMEM byte charset[] = {
	// 20 -
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	0b00000000,
	// 21 - !
	0b01011111,
	// 22 - "
	0b00000111,
	0b00000000,
	0b00000111,
	// 23 - #
	0b00010100,
	0b00111110,
	0b00010100,
	0b00111110,
	0b00010100,
	// 24 - $
	0b00100100,
	0b00101010,
	0b01111111,
	0b00101010,
	0b00010010,
	// 25 - %
	0b00100011,
	0b00010011,
	0b00001000,
	0b01100100,
	0b01100010,
	// 26 - &
	0b00110110,
	0b01001001,
	0b01010101,
	0b00100010,
	0b01010000,
	// 27 - '
	0b00000011,
	// 28 - (
	0b00011100,
	0b00100010,
	0b01000001,
	// 29 - )
	0b01000001,
	0b00100010,
	0b00011100,
	// 2a - *
	0b00010100,
	0b00001000,
	0b00111110,
	0b00001000,
	0b00010100,
	// 2b - +
	0b00001000,
	0b00001000,
	0b00111110,
	0b00001000,
	0b00001000,
	// 2c - ,
	0b10100000,
	0b01100000,
	// 2d - -
	0b00001000,
	0b00001000,
	0b00001000,
	0b00001000,
	0b00001000,
	// 2e - .
	0b01100000,
	0b01100000,
	// 2f - /
	0b00100000,
	0b00010000,
	0b00001000,
	0b00000100,
	0b00000010,
	// 30 - 0
	0b00111110,
	0b01010001,
	0b01001001,
	0b01000101,
	0b00111110,
	// 31 - 1
	0b00000000,
	0b01000010,
	0b01111111,
	0b01000000,
	0b00000000,
	// 32 - 2
	0b01000010,
	0b01100001,
	0b01010001,
	0b01001001,
	0b01000110,
	// 33 - 3
	0b00100001,
	0b01000001,
	0b01000101,
	0b01001011,
	0b00110001,
	// 34 - 4
	0b00011000,
	0b00010100,
	0b00010010,
	0b01111111,
	0b00010000,
	// 35 - 5
	0b00100111,
	0b01000101,
	0b01000101,
	0b01000101,
	0b00111001,
	// 36 - 6
	0b00111100,
	0b01001010,
	0b01001001,
	0b01001001,
	0b00110000,
	// 37 - 7
	0b00000011,
	0b01110001,
	0b00001001,
	0b00000101,
	0b00000011,
	// 38 - 8
	0b00110110,
	0b01001001,
	0b01001001,
	0b01001001,
	0b00110110,
	// 39 - 9
	0b00000110,
	0b01001001,
	0b01001001,
	0b00101001,
	0b00011110,
	// 3a - :
	0b00110110,
	0b00110110,
	// 3b - ;
	0b01010110,
	0b00110110,
	// 3c - <
	0b00001000,
	0b00010100,
	0b00100010,
	0b01000001,
	// 3d - =
	0b00010100,
	0b00010100,
	0b00010100,
	0b00010100,
	0b00010100,
	// 3e - >
	0b01000001,
	0b00100010,
	0b00010100,
	0b00001000,
	// 3f - ?
	0b00000010,
	0b00000001,
	0b01010001,
	0b00001001,
	0b00000110,
	// 40 - @
	0b00111110,
	0b01000001,
	0b01001101,
	0b01010101,
	0b01001110,
	// 41 - A
	0b01111110,
	0b00001001,
	0b00001001,
	0b00001001,
	0b01111110,
	// 42 - B
	0b01111111,
	0b01001001,
	0b01001001,
	0b01001001,
	0b00110110,
	// 43 - C
	0b00111110,
	0b01000001,
	0b01000001,
	0b01000001,
	0b00100010,
	// 44 - D
	0b01111111,
	0b01000001,
	0b01000001,
	0b01000001,
	0b00111110,
	// 45 - E
	0b01111111,
	0b01001001,
	0b01001001,
	0b01001001,
	0b01000001,
	// 46 - F
	0b01111111,
	0b00001001,
	0b00001001,
	0b00001001,
	0b00000001,
	// 47 - G
	0b00111110,
	0b01000001,
	0b01000001,
	0b01010001,
	0b01110010,
	// 48 - H
	0b01111111,
	0b00001000,
	0b00001000,
	0b00001000,
	0b01111111,
	// 49 - I
	0b01000001,
	0b01111111,
	0b01000001,
	// 4a - J
	0b00100000,
	0b01000000,
	0b01000001,
	0b00111111,
	0b00000001,
	// 4b - K
	0b01111111,
	0b00001000,
	0b00010100,
	0b00100010,
	0b01000001,
	// 4c - L
	0b01111111,
	0b01000000,
	0b01000000,
	0b01000000,
	0b01000000,
	// 4d - M
	0b01111111,
	0b00000010,
	0b00001100,
	0b00000010,
	0b01111111,
	// 4e - N
	0b01111111,
	0b00000100,
	0b00001000,
	0b00010000,
	0b01111111,
	// 4f - O
	0b00111110,
	0b01000001,
	0b01000001,
	0b01000001,
	0b00111110,
	// 50 - P
	0b01111111,
	0b00001001,
	0b00001001,
	0b00001001,
	0b00000110,
	// 51 - Q
	0b00111110,
	0b01000001,
	0b01010001,
	0b00100001,
	0b01011110,
	// 52 - R
	0b01111111,
	0b00001001,
	0b00011001,
	0b00101001,
	0b01000110,
	// 53 - S
	0b00100110,
	0b01001001,
	0b01001001,
	0b01001001,
	0b00110010,
	// 54 - T
	0b00000001,
	0b00000001,
	0b01111111,
	0b00000001,
	0b00000001,
	// 55 - U
	0b00111111,
	0b01000000,
	0b01000000,
	0b01000000,
	0b00111111,
	// 56 - V
	0b00011111,
	0b00100000,
	0b01000000,
	0b00100000,
	0b00011111,
	// 57 - W
	0b00111111,
	0b01000000,
	0b00110000,
	0b01000000,
	0b00111111,
	// 58 - X
	0b01100011,
	0b00010100,
	0b00001000,
	0b00010100,
	0b01100011,
	// 59 - Y
	0b00000111,
	0b00001000,
	0b01110000,
	0b00001000,
	0b00000111,
	// 5a - Z
	0b01100001,
	0b01010001,
	0b01001001,
	0b01000101,
	0b01000011,
	// 5b - [
	0b01111111,
	0b01000001,
	0b01000001,
	// 5c - backslash
	0b00000010,
	0b00000100,
	0b00001000,
	0b00010000,
	0b00100000,
	// 5d - ]
	0b01000001,
	0b01000001,
	0b01111111,
	// 5e - ^
	0b00000100,
	0b00000010,
	0b00000001,
	0b00000010,
	0b00000100,
	// 5f - _
	0b01000000,
	0b01000000,
	0b01000000,
	0b01000000,
	0b01000000,
	// 60 - `
	0b00000001,
	0b00000010,
	0b00000100,
	// 61 - a
	0b00100000,
	0b01010100,
	0b01010100,
	0b01010100,
	0b01111000,
	// 62 - b
	0b01111111,
	0b01001000,
	0b01001000,
	0b01001000,
	0b00110000,
	// 63 - c
	0b00111000,
	0b01000100,
	0b01000100,
	0b01000100,
	0b00100000,
	// 64 - d
	0b00110000,
	0b01001000,
	0b01001000,
	0b01001000,
	0b01111111,
	// 65 - e
	0b00111000,
	0b01010100,
	0b01010100,
	0b01010100,
	0b00011000,
	// 66 - f
	0b00001000,
	0b01111110,
	0b00001001,
	0b00000010,
	// 67 - g
	0b10011000,
	0b10100100,
	0b10100100,
	0b10100100,
	0b01111100,
	// 68 - h
	0b01111111,
	0b00001000,
	0b00001000,
	0b00001000,
	0b01110000,
	// 69 - i
	0b01001000,
	0b01111010,
	0b01000000,
	// 6a - j
	0b00100000,
	0b01000000,
	0b01000100,
	0b00111101,
	// 6b - k
	0b01111111,
	0b00010000,
	0b00101000,
	0b01000100,
	// 6c - l
	0b01000001,
	0b01111111,
	0b01000000,
	// 6d - m
	0b01111100,
	0b00000100,
	0b00011000,
	0b00000100,
	0b01111000,
	// 6e - n
	0b01111100,
	0b00001000,
	0b00000100,
	0b00000100,
	0b01111000,
	// 6f - o
	0b00111000,
	0b01000100,
	0b01000100,
	0b01000100,
	0b00111000,
	// 70 - p
	0b11111100,
	0b00100100,
	0b00100100,
	0b00100100,
	0b00011000,
	// 71 - q
	0b00011000,
	0b00100100,
	0b00100100,
	0b00100100,
	0b11111100,
	// 72 - r
	0b01111100,
	0b00001000,
	0b00000100,
	0b00000100,
	0b00001000,
	// 73 - s
	0b01001000,
	0b01010100,
	0b01010100,
	0b01010100,
	0b00100000,
	// 74 - t
	0b00000100,
	0b00111111,
	0b01000100,
	0b00100000,
	// 75 - u
	0b00111100,
	0b01000000,
	0b01000000,
	0b00100000,
	0b01111100,
	// 76 - v
	0b00011100,
	0b00100000,
	0b01000000,
	0b00100000,
	0b00011100,
	// 77 - w
	0b00111100,
	0b01000000,
	0b00110000,
	0b01000000,
	0b00111100,
	// 78 - x
	0b01000100,
	0b00101000,
	0b00010000,
	0b00101000,
	0b01000100,
	// 79 - y
	0b00011100,
	0b10100000,
	0b10100000,
	0b10100000,
	0b01111100,
	// 7a - z
	0b01000100,
	0b01100100,
	0b01010100,
	0b01001100,
	0b01000100,
	// 7b - {
	0b00001000,
	0b00110110,
	0b01000001,
	// 7c - |
	0b01111111,
	// 7d - }
	0b01000001,
	0b00110110,
	0b00001000,
	// 7e - ~
	0b00001000,
	0b00000100,
	0b00000100,
	0b00001000,
	0b00000100,
};

const PROGMEM byte charset_width[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5, 1, 3, 5, 5, 5, 5, 1, 3, 3, 5, 5, 2, 5, 2, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 4, 5, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 3, 5, 5,
	3, 5, 5, 5, 5, 5, 4, 5, 5, 3, 4, 4, 3, 5, 5, 5,
	5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 3, 1, 3, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

const PROGMEM int charset_offset[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 5, 6, 9, 14, 19, 24, 29, 30, 33, 36, 41, 46, 48, 53, 55,
	60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 112, 114, 118, 123, 127,
	132, 137, 142, 147, 152, 157, 162, 167, 172, 177, 180, 185, 190, 195, 200, 205,
	210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 268, 273, 276, 281,
	286, 289, 294, 299, 304, 309, 314, 318, 323, 328, 331, 335, 339, 342, 347, 352,
	357, 362, 367, 372, 377, 381, 386, 391, 396, 401, 406, 411, 414, 415, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/**

 */
int Font::getCharWidth(char ch) {
	return pgm_read_byte(&charset_width[ch]);
}

/**

 */
int Font::getStringWidth(String str) {
	int width = 0;

	// width of every char
	for (int i = 0; i < str.length(); i++) {
		width += getCharWidth(str.charAt(i));
	}

	// with spaces
	width += str.length() - 1;

	return width;
}

/**

 */
byte Font::getCharColumn(char ch, int col) {
	int offset = pgm_read_word(&charset_offset[ch]);

	return pgm_read_byte(&charset[offset] + col);
}

